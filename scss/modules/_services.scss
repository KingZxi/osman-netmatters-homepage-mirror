/* ------------------------------------------------------

Card:

------------------------------------------------------ */

//Service is applied to the entire cards section container
.service {
  padding-top: 50px;

  //Section heading
  .h1 {
    color: $tuna;
    font-weight: 600;
    font-size: 2.7rem;
    text-align: left;
  }

  .header-row-positioning {
    display: flex;
    justify-content: space-between;
  }

  .hide {
    margin-top: 10px;

    @include mq(small) {
      display: none;
    }
  }

  .underline-hover {
    &:hover {
      text-decoration: underline;
    }
  }

  //Each card heading
  h2 {
    position: relative;
    margin: 0 0 11px;
    padding-bottom: 10px;
    font-size: 1.3rem;
    font-weight: 400;
    color: $tuna;
  }

  a {
    text-decoration: none;
    font-weight: 600;
    color: $tuna;

    .arrow-right:before {
      font-family: icomoon !important;
      font-style: normal;
      font-weight: 400;
      font-variant: normal;
      text-transform: none;
      line-height: 1;
      content: "\ea3c";
    }
  }

  //Each card paragraph
  p {
    margin-bottom: 13px;
    margin-top: 0;
    font-size: 0.8125rem;
    font-weight: 400;
    line-height: 1.375rem;
    color: $tuna;
  }
}

//This is applied to each card container
.card {
  display: block;
  margin-top: 30px;
  padding: 30px;
  border: 1px solid #ccc;
  border-radius: 15px;
  box-shadow: 0 3px 35px rgba(0, 0, 0, 0.1);
  text-align: center;
  transition: 0.5s ease;
  cursor: pointer;

  @at-root {
    .bespoke {
      @include card-type(bespoke);
    }
    .it {
      @include card-type(it);
    }
    .marketting {
      @include card-type(marketting);
    }
    .telecoms {
      @include card-type(telecoms);
    }
    .web {
      @include card-type(web);
    }
    .cyber {
      @include card-type(cyber);
    }
    .developer {
      @include card-type(developer);
    }
  }

  //Each card has an element container within it's initial .card container, this is used for identifying the type of carrd
  @include s-e("element") {
    //I feel like this doesn't need to be at root, in the future I want to find a different solution as I hate using roots and globals
    //This uses a mixin to assign each one of the cards their respective colors and icon
    display: flex;
    flex-direction: column;
    height: 100%;

    //The span contains the card icons
    span {
      display: block;
    }

    //Class applied to divs that contain the icon
    @include s-e("icon") {
      height: 65px;
      width: 65px;
      margin: 0 auto 17px;
      border-radius: 50%;
      background-color: $tuna;
      color: #fff;
    }

    //Class applied to spans that contain each icon
    [class*="card-icon"] {
      font-family: icomoon !important;
      font-weight: 400;
      font-size: 2rem;
      text-align: center;
      line-height: 62px;
    }

    //This button class is applied to each button, each button is actually an anchor tag.
    .btn {
      @extend %btn;
    }
  }

  //Hover effects on cards:
  &:hover {
    top: -10px;
    border-color: transparent;
    transition: 0.5s ease;
    transform: translateY(-10px); //This is used to physically raise the object

    p,
    h2 {
      color: #fff;
    }

    .card__element__icon:has(.card-icon) {
      background-color: $white;
    }
  }
}

//This section applies to the 'view our work' part at the bottom of 'Our Services' section
.service-all {
  @extend %section-anchor;
  padding-top: 30px;
}

//This is a wrapper that wraps around all card elements to give them flex properties.
.card-flex {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 30px;

  //Basic mobile layout cards
  .card {
    flex: 1 0 100%;
  }

  //Medium layout cards: 3 rows with 1 card each, 2 rows with 2 cards each.
  @include mq(medium) {
    .card:nth-child(4) {
      flex: 1 0 calc(50% - 30px); //Flex calc value will always be subtracted by the amount of gap applied to the cards
    }
    .card:nth-child(5) {
      flex: 1 0 calc(50% - 30px);
    }
    .card:nth-child(6) {
      flex: 1 0 calc(50% - 30px);
    }
    .card:nth-child(7) {
      flex: 1 0 calc(50% - 30px);
    }
  }

  //Large layout cards, 1 row with 3 cards, 1 row with 4 cards.
  @include mq(large) {
    .card:nth-child(1) {
      flex: 1 0 calc(33% - 30px);
    }
    .card:nth-child(2) {
      flex: 1 0 calc(33% - 30px);
    }
    .card:nth-child(3) {
      flex: 1 0 calc(33% - 30px);
    }
    .card:nth-child(4) {
      flex: 1 0 calc(25% - 30px);
    }
    .card:nth-child(5) {
      flex: 1 0 calc(25% - 30px);
    }
    .card:nth-child(6) {
      flex: 1 0 calc(25% - 30px);
    }
    .card:nth-child(7) {
      flex: 1 0 calc(25% - 30px);
    }
  }
}

@include mq(landscape) {
  .card:nth-child(1) {
    flex: 1 0 calc(33% - 30px);
  }
  .card:nth-child(2) {
    flex: 1 0 calc(33% - 30px);
  }
  .card:nth-child(3) {
    flex: 1 0 calc(33% - 30px);
  }
  .card:nth-child(4) {
    flex: 1 0 calc(25% - 30px);
  }
  .card:nth-child(5) {
    flex: 1 0 calc(25% - 30px);
  }
  .card:nth-child(6) {
    flex: 1 0 calc(25% - 30px);
  }
  .card:nth-child(7) {
    flex: 1 0 calc(25% - 30px);
  }
}

.card-btn-container {
  margin-top: auto;
}
